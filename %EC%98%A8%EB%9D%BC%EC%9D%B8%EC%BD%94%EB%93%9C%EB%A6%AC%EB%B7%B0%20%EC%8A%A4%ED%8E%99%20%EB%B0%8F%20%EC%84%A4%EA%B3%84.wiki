#title 온라인코드리뷰 스펙 및 설계
**//Obsolete: nFORGE 2.0 이상 버전에서는 동작하지 않습니다.**//

[[[[TableOfContents]]]]
== 리뷰 파일의 생성과 등록 ==
* 리눅스 플랫폼을 주요 대상으로 한다
* Subversion을 대상으로 한다

=== 터미널에서 직접 코드 리뷰 요청하기 ===
* cr_upload라는 php-cli 도구를 제공하여 코드 리뷰를 위한 파일 생성과 업로드를 한번에 수행할 수 있도록 한다.
 {{{
cr_upload [[-c Subversion config dir ]] -m "Review Message" [[files....]]

1. 파일을 지정하지 않으면 현재 폴더 아래의 모든 변경 파일을 대상으로 한다.
2. -m으로 리뷰 요청 메시지를 필수로 입력해야 한다.
3. 리뷰 요청 메시지에 [[#이슈번호]] 형태로 자료를 입력하면 해당 이슈와의 연동 작업을 수행한다.
4. cr_upload는 Subversion으로 체크 아웃 받은 디렉토리에서 수행한다.
5. 바이너리 파일도 업로드에 포함한다.
6. Subversion 인증 정보를 사용하고 인증 정보를 저장하지 않는 경우에는 -c 옵션으로 해당 정보가 있는 폴더를 지정할 수 있다.
7. Subversion 자동 업데이트를 수행하고 대상 파일중에 Conflict가 발생하면 작업을 중단한다.
}}}
* cr_upload로 리뷰를 요청하면 코드리뷰 요청으로 자동 등록하고, 해당 프로젝트의 커미터 권한을 가진 사용자와 코드 자동 알림을 설정한 사용자에게 코드 리뷰 요청 메일을 전송한다.
 {{{
[[newmyprj 코드 리뷰]] 2009-03-16 17:57

다음 링크를 통해서 자세한 정보를 확인할 수 있습니다: 
http://nforge.magichost/projects/newmyprj/code?viewfunc=rv_detail&cr_id=61
아래의 마커 사이에 메시지를 입력해서 답장을 보내시면 리뷰 의견으로 추가합니다: 
@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+
(이곳에 리뷰메시지를 입력하세요. [[Agree]]는 커미터만 가능)
@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+

리뷰 요청자 : 
    테스터 

리뷰 요청 메시지 : 
    [[#27]]환경 파일을 수정했습니다. 리뷰를 요청합니다

리뷰 파일 : 
    resolv.conf	4
    host.conf	4
    testdir/lll.conf	0
    

관련 이슈 : 
    이슈 #27 환경 파일 수정 필요
    http://nforge.magichost/tracker/?func=detail&atid=107group_id=8&aid=27 
}}}
* 리뷰 요청 메일에는 온라인 코드 리뷰로의 링크와 관련 이슈로의 링크를 제공한다.
* 최초 리뷰 요청 메일에 오프라인 코드리뷰를 위한 패치 파일을 첨부로 제공한다.
* 리뷰 요청 메일 및 리뷰 진행 메일에 대한 회신을 통해서 리뷰 메시지를 전송할 수 있으며, 커미터의 경우에는 [[Agree]]로 동의의사를 함께 설정할 수 있다.

=== 웹에서 패치로 코드 리뷰 등록하기 ===
* 웹 인터페이스를 통해 코드 리뷰를 요청 할 수 있도록 한다. 리뷰 파일은 아래와 같은 명령어로 생성한 패치 파일을 첨부해야 한다.
 {{{
svn update
svn diff > I100_issue.patch
}}}
* 코드 리뷰 요청 메시지, 요청 메일은 터미널에서 직접 코드 리뷰 요청하기를 준용한다.
* 패치 파일과 더불어 Base directory를 입력받고, 입력하지 않은 경우에는 /trunk를 기본값으로 한다.
* 패치 파일에 리비전 정보가 없거나 비정상적으로 작성한 패치 파일인 경우에는 패치 파일을 기반으로 원본을 찾을 수 없으므로 패치 파일 자체에 대한 리뷰를 수행하도록 등록한다. svn diff 수행 이전에 반드시 svn update를 수행해서 정확한 리비전 정보가 패치에 담기도록 한다.

== 코드 리뷰 요청 리스트 ==
* 코드 탭의 홈에 코드리뷰 요청 내역을 리스팅한다(코드 리뷰 내역이 없는 경우에는 기존의 코드 탭과 동일한 형태로 출력한다)
attachment:UploadedFiles/코드홈토글_코드리뷰.png
* 코드 홈의 기본 화면은 코드 리뷰 리스트를 출력하고 상단의 소스코드 체크아웃 방법/코드리뷰 토글 버튼으로 기존의 소스코드 체크아웃 방법과 코드리뷰 리스트를 선택하여 볼 수 있도록 한다.
attachment:UploadedFiles/코드홈토글_사용법.png
* 상태는 요청중-리뷰중-동의로 관리한다.
* 전체-요청중-리뷰중-동의 상태별 탭으로(페이징 포함) 조회할 수 있도록 한다.
* 리스트의 내용은 번호/제목/작성일/리뷰 상태/작성자를 포함한다.
* 리뷰 내역을 클릭하면 리뷰 상세 화면을 출력한다.

== 웹을 통한 코드 리뷰 요청 화면 ==
* 포럼/이슈 상세 화면 하단에 웹을 통한 리뷰 요청 버튼을 배치한다. 리뷰 요청 메시지 처음에 해당 이슈 번호를 기본 배치해주고 개발자가 상황에 따라 편집할 수 있도록 한다.
attachment:UploadedFiles/코드리뷰_이슈에서등록.png
* 리뷰 요청 메시지, Subversion으로 생성한 패치 파일 첨부로 리뷰를 요청할 수 있도록 한다.
* 리뷰 요청 메시지가 없거나 정상적인 패치 파일이 아닌 경우에도 패치 파일에 대한 리뷰를 수행할 수 있도록 등록한다.
* 코드 저장소에 대한 익명 접근을 허용하고, 코드를 외부 손님에 공개한 경우에는 CAPTCHA 인증을 포함하여 익명으로 코드 리뷰를 요청할 수 있다.
* 등록되어 있는 본문의 첨부 파일이나 덧글의 첨부 파일의 확장자가 *.patch인 경우에는 파일 옆에 리뷰 등록 버튼을 배치하여 이미 등록되어 있는 파일로 리뷰를 요청할 수 있다. 이 경우 해당 포럼/이슈와 코드 리뷰 간의 연동 정보를 자동 저장한다.
attachment:UploadedFiles/코드리뷰_첨부로등록.png
* 이미 등록한 본문 및 덧글의 첨부 파일로 리뷰를 요청하는 것은 코드에의 접근 권한이 있는 사용자, 해당 파일의 등록자만 가능하다.

== 코드 리뷰 상세 화면 ==
* 리뷰 요청 리스트에서 제목을 클릭하면 코드 리뷰 상세 화면을 출력한다.
* 코드 리뷰 상세 화면은 리뷰 요청에 포함한 파일 리스트와 리뷰 메시지 리스트, 코드 Diff 화면으로 구성한다.
* 파일 리스트, 리뷰 메시지 리스트, 코드 Diff는 토글로 각 부문을 보이기/숨기기 할 수 있다. 
* 각 코드 리뷰에 대해서 오프라인 리뷰가 가능하도록 패치 파일에 대한 다운로드 버튼을 제공하고 목록보기 버튼도 제공한다.

=== 리뷰 상세 기본 화면 ===
attachment:UploadedFiles/코드리뷰_상세기본화면.png
* 리뷰 요청 내역의 상세 정보와 현재 상태를 출력하고 동의를 설정한 리뷰어의 리스트를 출력한다.
* 요청한 파일 정보(디렉토리, 파일명, 크기, 리비전등)를 출력하고 리비전 정보가 있는 경우에는 해당 리비전 로그로의 링크를 제공한다. 
* 파일 리스트는 경로, 변경후, 변경전으로 출력한다. 단, 웹으로 패치를 등록했으나 리비전 정보나 Base directory 정보가 부정확하여 원본을 분석할 수 없는 경우에는 파일리스트를 출력하지 않는다.
* 파일명을 클릭하면 해당 코드의 Diff 화면을 토글한다.
* 리뷰 요청 메시지는 포럼/이슈/위키/리비전 및 URL에 대한 자동 링크를 적용한다.

=== 리뷰 메시지 리스트 ===
* 리뷰 메시지를 사용자-파일-라인-상태-메시지-시간 등의 정보를 출력한다.(전체에 대한 동의 메시지는 파일과 라인 정보를 표시하지 않는다)
* 리뷰 메시지는 포럼/이슈/위키/리비전 및 URL에 대한 자동 링크를 적용한다.
* 커미터 권한을 가진 사용자에게는 메시지와 동의 플래그를 배치하여 바로 리뷰 메시지를 등록할 수 있도록 한다.
 
=== 코드 Diff 화면 ===
attachment:UploadedFiles/코드리뷰_상세diff.png
* 선택한 파일의 side-by-side diff를 제공한다. 
* 웹으로 패치를 등록했으나 리비전 정보나 Base directory 정보가 부정확하여 원본을 분석할 수 없는 경우에는 Diff대신 패치파일 내용을 출력하여 패치에 대해서 직접 리뷰를 수행하도록 한다.
* 코드의 라인을 클릭하면 해당 라인을 구분 표시하고 팝업 창을 통해서 리뷰 메시지를 입력할 수 있도록 한다.
* 리뷰 메시지 입력창은 특정 라인에 대한 메시지로 상태는 리뷰중으로 처리한다.
attachment:UploadedFiles/코드리뷰_인라인주석달기.png
* 최종적으로 입력한 리뷰 메시지의 상태를 리뷰의 상태로 설정한다.
* 메시지 입력후 화면은 코드 리뷰 상세 기본 화면으로 전환한다.
* 리뷰 메시지를 입력한 라인에는 별도의 마커를 표시한다. 마커 내부에는 해당 라인에 대해서 입력한 메시지의 개수를 표시하고, 해당 마커 위에 마우스를 올려 놓으면 입력한 메시지를 풍선 도움말로 표시한다.
* 리뷰의 변동 내역은 모든 커미터에 메일로 전송한다.

== 타 기능 과의 연동 ==
* 이슈의 활동 내역에 코드 리뷰의 상태 변화가 보여 지도록 한다.(변경 기록이나 관련 코드와 같이 코드리뷰 테이블의 정보를 가공해서 출력하는 방식으로 제공한다) 
* 프로젝트 홈 및 프로젝트 확동 내역에도 리뷰의 내용이 보여지도록 한다.
* 리뷰 상세 메시지나 리뷰 메시지에 이슈 번호를 입력하면 해당 이슈로 이동할 수 있다.
* 코드 리뷰 상세 화면에서 파일 단위의 리비전을 표시하는 경우 해당 리비전 로그로 이동할 수 있다.
* 포럼/이슈 등에서 c번호의 형태로 리뷰로의 자동 링크를 설정할 수 있다.

== 코딩 관련 사항 ==
* 코드 리뷰 기능을 수행하는 코드는 데이터베이스 처리와 주요 공통 기능을 담당하는 클래스 파일로 제공한다.
* Subversion이 아닌 도구를 코드 리뷰에 연동하는 것에 대비하여 SCM 도구와 연동하는 부분은 최대한 플러그인 구조로 구현한다.

== 테이블 스키마와 리뷰 데이터베이스 ==
* 코드리뷰 신청 내역을 관리하는 code_review 테이블을 중심으로 리뷰 메시지를 저장하는 code_review_message, 이슈와 연관성 있는 리뷰 요청인 경우 관련 포럼/이슈 정보를 저장하는 code_review_tracker를 생성한다.
* 업그레이드 사용자를 위해서 DB migration script를 작성한다(시스템 변경을 위한 준비는 가이드로 제시한다).
* 정상적인 리뷰 요청에 대해서는 $sys_chroot/review 폴더에 각 프로젝트 별로 리뷰 파일을 관리한다.
* nFORGE 설치 과정에 리뷰 파일 저장을 위한 준비를 포함해야 하며, 프로젝트 단위의 Subversion Repository 생성 시점에 인증과 파일 전달에 사용할 Review Repository의 점검 및 생성 과정을 수행한다.
* 코드리뷰 파일을 리뷰 ID 단위로 폴더를 생성하여 관리하며, 폴더에는 리뷰 패키지 파일과 패치 파일을 생성하여 두고 original/altered로 구분한 요청 파일을 저장한다.

=== code_review 테이블 ===
{{{<schema>
        <table name="code_review" type="table">
                <column name="code_review_id" type="number" size="11" auto_increment="1, 1" notnull="notnull" primary_k>
                <column name="group_id" type="number" size="11" notnull="notnull" />
                <column name="status_id" type="number" size="11" default="1" notnull="notnull" />
                <column name="submitted_by" type="number" size="11" default="100" notnull="notnull" />
                <column name="open_date" type="number" size="11" default="0" notnull="notnull" />
                <column name="last_modified_date" type="number" size="11" />
                <column name="summary" type="text" notnull="notnull" />
        </table>
        <index name="cr_groupid_statusid" type="index">
                <id_column>group_id</id_column>
                <id_column>status_id</id_column>
        </index>
        <index name="cr_groupid_submit" type="index">
                <id_column>group_id</id_column>
                <id_column>submitted_by</id_column>
        </index>
        <index name="cr_submit_status" type="index">
                <id_column>submitted_by</id_column>
                <id_column>status_id</id_column>
        </index>
        <index name="cr_groupid_codereviewid" type="index">
                <id_column>group_id</id_column>
                <id_column>code_review_id</id_column>
        </index>
</schema>}}}

=== code_review_message 테이블 ===
{{{<schema>
        <table name="code_review_message" type="table">
                <column name="message_id" type="number" size="11" auto_increment="1, 1" notnull="notnull" primary_key=">
                <column name="code_review_id" type="number" size="11" notnull="notnull" />
                <column name="status_id" type="number" size="11" default="0" notnull="notnull" />
                <column name="submitted_by" type="number" size="11" notnull="notnull" />
                <column name="adddate" type="number" size="11" default="0" notnull="notnull" />
                <column name="msgkey" type="varchar" size="256" notnull="notnull" />
                <column name="msgbody" type="text" notnull="notnull" />
        </table>
        <index name="cr_codereviewid_msgkey" type="index">
                <id_column>code_review_id</id_column>
                <id_column>msgkey</id_column>
        </index>
</schema>}}}

=== code_review_tracker 테이블 ===
{{{<schema>
        <table name="code_review_tracker" type="table">
                <column name="artifact_id" type="number" size="11" notnull="notnull" />
                <column name="code_review_id" type="number" size="11" notnull="notnull" />
        </table>
        <index name="crtracker_codereviewid" type="index">
                <id_column>artifact_id</id_column>
                <id_column>code_review_id</id_column>
        </index>
</schema>}}}

== 코드리뷰 패키지 파일의 구조 ==
 * 바이너리 파일의 변경 또는 추가까지를 지원하기 위해서 altered/original간의 변경 내역 뿐만아니라 해당 파일의 전체 내용을 포함 형태의 코드 리뷰 패키지 생성과 업로드를 지원한다.
 * 파일의 확장자는 *.cr로 생성하며 zip을 사용한다.
 * 아카이브 내용은 crinfo.txt, altered폴더, original폴더로 구성한다.
 * altered폴더와 original폴더의 각 파일은 디렉토리를 정보를 포함할 수 있으며, altered/original가 동일한 구조를 소유해야 한다. 예를 들어 추가한 파일의 경우에는 altered에 추가한 파일을 저장하고 original의 동일한 폴더 위치에 0크기의 파일이 존재해야 한다. 삭제한 경우에는 반대로 파일을 위치시키면 된다.
 * original 폴더에 존재하는 변경 대상 파일은 반드시 Subversion 정보를 인지할 수 있어야 하고, 각 파일의 리비전은 crinfo.txt에 한 라인에 한 파일씩 기술한다. crinfo.txt의 구조는 라인 단위로 경로 및 파일명과 리비전을 탭문자로 구분한 형태이다
 {{{# unzip -l /var/lib/nforge/review/newmyprj/r56/code_review.cr
Archive:  /var/lib/nforge/review/newmyprj/r56/code_review.cr
  Length     Date   Time    Name
 --------    ----   ----    ----
        0  03-12-09 12:42   altered/
     8751  03-12-09 12:42   altered/ldap.conf
        0  03-12-09 12:42   altered/testdir/
    15511  03-12-09 12:42   altered/testdir/lll.conf
       68  03-12-09 12:42   altered/host.conf
        0  03-12-09 12:42   altered/resolv.conf
       67  03-12-09 12:42   crinfo.txt
        0  03-12-09 12:42   original/
     9019  02-27-09 14:57   original/ldap.conf
        0  03-12-09 12:42   original/testdir/
        0  03-12-09 12:42   original/testdir/lll.conf
       17  02-27-09 14:57   original/host.conf
       79  02-27-09 14:57   original/resolv.conf
 --------                   -------
    33512                   13 files
}}}
* 이 파일은 두 폴더를 단순히 압축한 것으로 Winmerge같이 압축 해제와 폴더간 비교가 가능한 도구를 사용하면 직접 열어서 조회할 수 있다.

== 코드리뷰(Subversion) 패치 파일의 형태 ==
* patch 파일을 /review/ Repository를 통해서 체크인하는 경우에는 svn diff 작업을 Repository Root 또는 trunk에서 수행해야하고 patch 파일을 웹으로 업로드하는 경우에는 Base directory를 입력해야만 한다.
* Diff 포맷은 unified diff 형태이다.
* 여러 파일을 아래와 같은 형태의 구분자를 헤더에 두고 배열한다.
{{{Index: path/to/file.cpp
===================================================================
}}}
* original/altered 파일명 옆에 일반 unified-diff는 Timestamp가 있으나,  SVN-diff에서는 (working copy) 또는 (revision 197)와 같은 형태로 표시한다.
* 아래는 여러 파일에 대한 Subversion patch 파일의 예제이다
{{{
Index: cronjobs/db_create_xml.sh
===================================================================
--- cronjobs/db_create_xml.sh   (revision 197)
+++ cronjobs/db_create_xml.sh   (working copy)
@@ -1,7 +1,6 @@
 #!/bin/sh

-#NFORGE="/opt/nforge"
-NFORGE="."
+NFORGE="/opt/nforge"

 PHP="/usr/bin/php -d include_path=.:/opt/nforge:/opt/nforge/www/include:/etc/nforge/ -f"

Index: plugins/scmsvn/cronjobs/create_svn.php
===================================================================
--- plugins/scmsvn/cronjobs/create_svn.php      (revision 197)
+++ plugins/scmsvn/cronjobs/create_svn.php      (working copy)
@@ -175,6 +175,8 @@
                        if ($project->usesPlugin('svntracker')) {
                                check_svn_tracker($row["unix_group_name"], $svn."/".$row["unix_group_name"][0]."/".$row[
"unix_group_name"]);
                        }
+                       passthru ("[ ! -d $sys_chroot/reviewroot/".$row["unix_group_name"][0]."/".$row["unix_group_name"
]." ] && mkdir -p $svn/".$row["unix_group_name"][0]."/ && $svn_path/svnadmin create $repos_type $sys_chroot/reviewroot/"
.$row["unix_group_name"][0]."/".$row["unix_group_name"]);
+                       check_svnreviewer($row["unix_group_name"], $sys_chroot."/reviewroot/".$row["unix_group_name"][0]
."/".$row["unix_group_name"]);
                } else {
                        passthru ("[ ! -d $svn/".$row["unix_group_name"]." ] &&  $svn_path/svnadmin create $repos_type $
svn/".$row["unix_group_name"]." && $svn_path/svnadmin load $svn/".$row["unix_group_name"]." < $dump_file");
                        $cmd = 'chown -R '.$file_owner.' '.$svn.'/'.$row["unix_group_name"];
@@ -182,6 +184,10 @@
                        if ($project->usesPlugin('svntracker')) {
                                check_svn_tracker($row["unix_group_name"], $svn."/".$row["unix_group_name"]);
                        }
+                       passthru ("[ ! -d $sys_chroot/reviewroot/".$row["unix_group_name"]." ] &&  $svn_path/svnadmin cr
eate $repos_type $sys_chroot/reviewroot/".$row["unix_group_name"]);
+                       $cmd = 'chown -R '.$file_owner.' '.$sys_chroot.'/reviewroot/'.$row["unix_group_name"];
+                       passthru($cmd);
+                       check_svnreviewer($row["unix_group_name"], $sys_chroot."/reviewroot/".$row["unix_group_name"]);
                }
                $access_file_content .= add2AccessFile($row["group_id"]);
                $cmd = 'chown -R '.$file_owner.' '.$svn;
}}}

== 메일 회신을 통한 코드리뷰 처리 ==
* 코드리뷰 관련 메일은 프로젝트명-review@호스트명을 이메일 주소로 발송한다.
* 리뷰 메시지에는 회신을 통한 리뷰 메시지 전달을 위한 마커를 아래와 같이 포함하며, 마커 내부에 리뷰 메시지를 포함해서 회신한다.
{{{@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+
(이곳에 리뷰메시지를 입력하세요. [Agree]는 커미터만 가능)
@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+@+
}}}
* 메일 회신 메시지 내부에 대괄호와 함께 Agree를 기술하면 리뷰 상태를 변경하고 관련 태그가 존재하지 않으면 단순 리뷰 메시지로 처리하고 상태는 리뷰중으로 설정한다.

== 코드리뷰 프로세스 고려 사항 ==
* 코드리뷰 과정에서 재수정 요청이 있는 경우에는 기존 리뷰 파일에 대한 수정을 제공하지는 않는다. 이런 경우에는 새로운 코드 리뷰로 프로세스를 다시 시작한다.
* c번호의 형태로 리뷰 요청간 연관성을 부여할 수 있으며, 지정한 코드 리뷰를 클릭하면 해당 코드리뷰로 이동할 수 있다.
* 리뷰 요청과 동의 및 기타 리뷰 메시지에 대해서는 수정 및 삭제 기능을 제공하지 않는다.
* 리뷰 건별 최종 상태는 최종적으로 수행한 리뷰 메시지에 따라 건별 최종 상태를 결정한다.
* 리뷰 동의에 따른 커밋 처리는 온라인 코드 리뷰에서는 지원하지 않는다. 또한, 커밋을 위한 동의 조건과 정책등은 프로젝트 단위의 가이드로 코드 리뷰 도구에서는 관여하지 않는다.
