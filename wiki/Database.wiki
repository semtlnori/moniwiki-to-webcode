nFORGE는 데이터를 저장하기 위해 데이터베이스를 사용합니다. 지원하는 DBMS는 CUBIRD, MySQL, PostgreSQL 입니다.

=== 초기화 ===
nFORGE는 지원하는 세가지 DBMS에 대한 일관된 인터페이스를 제공합니다. 이를 이용하기 위해서는 우선 현재 설치된 DBMS에 맞는 라이브러리를 include 해야합니다. 아래의 세 파일 중 하나를 include 하면 됩니다.
{{{
common/include/database-cubrid.php
common/include/database-mysql.php
common/include/database-pgsql.php
}}}

[[설정파일]]의 $sys_server에 DBMS 이름이 기록되어 있으므로, 아래와 같은 방법으로 알맞는 파일을 include 할 수 있습니다.
{{{
require_once('common/include/database-'.$sys_server.'.php');
}}}

이후 **db_connect()**를 호출하면, db_connect() 함수는 nforge의 설정을 읽어서 데이터베이스와 커넥션을 맺습니다.
{{{
db_connect();
}}}

또한 db_connect() 함수는 nforge 종료시(한번의 HTTP Transaction이 완료된 경우) **system_cleanup()** 함수가 실행되도록 등록합니다. system_cleanup() 함수는 커밋되지 않은 트랜잭션을 롤백시킵니다.

위의 초기화 작업은 www/include/pre.php나 www/include/squal_pre.php 를 include 한 경우 자동으로 실행됩니다. 따라서 이 파일들을 include 했다면 바로 데이터베이스를 사용할 수 있는 상태가 됩니다.

=== Query ===
**db_query($sql)**를 호출하여 SQL 쿼리문을 실행합니다. 실행 결과로부터 **db_result($result, $row, $field)**로 특정 row, 특정 필드의 값을 가져올 수 있습니다. 작업이 끝나면 **db_free_result($result)**로 리소스를 해제합니다.
{{{
$result = db_query("SELECT * FROM users WHERE
                 user_name='".htmlspecialchars($user_name)."'");
$user_id = db_result($result,0,'user_id');
db_free_result($result);
}}}

**db_numrows($result)**: 쿼리 실행 결과의 레코드 갯수를 셉니다.
{{{
$res=db_query("SELECT * FROM users WHERE user_id=$user_id");           
if (db_numrows($res) < 1) {
    return false;
}
}}}  

**db_fetch_array($result)**: 쿼리 실행 결과로부터 한개의 레코드를 가져옵니다.
{{{
$result = db_query("SELECT * FROM users");
$user_ids = array();           
while ($arr = db_fetch_array($result)) {  
   $user_ids[] = $arr['user_id'];                                                                              }
db_free_result($res);          
}}}

**db_query_bind($sql, $array)**: DB에 SQL 쿼리문을 전송합니다. db_query()와는 달리 SQL 쿼리문에 들어갈 값들을 배열로 넘겨줄 수 있기에 SQL Injection에 대해 보다 안전합니다. 단 이 함수의 반환값을 이용해 db_result()나 db_fetch_array()를 호출할 수 없습니다. 따라서 SELECT 문을 실행하고자 할 때는 사용할 수 없습니다.
{{{
$sql = "UPDATE form_keys SET is_used=0 WHERE \"key\"=?";
$res = db_query_bind($sql, array($key));
}}}

=== Transaction ===
CUBRID, MySQL(InnoDB), PostgreSQL은 Transaction을 지원합니다.

db_begin()으로 트랜잭션을 시작하고, db_commit()으로 커밋하며, db_rollback()으로 롤백합니다.
{{{
db_begin();
$res = db_query("DELETE FROM artifact_extra_field_data WHERE artifact_id=".$this->getID());
if (!$res) {
    db_rollback();                 
    throw new Exception('Error deleting extra field data: '.db_error());
}
$res = db_query("DELETE FROM artifact_file WHERE artifact_id=".$this->getID());
if (!$res) {
    db_rollback();                 
    throw new Exception('Error deleting file from db: '.db_error());
}
db_commit();
}}}

**주의사항:** 중첩된 트랜잭션에 db_rollback()과 db_commit()을 섞어서 사용하는 경우 불완전하게 동작합니다. 예를 들어 아래의 코드는,
{{{
db_begin();
db_query("UPDATE users SET realname='test'");
db_begin();
db_query("UPDATE users SET user_name='test'");
db_rollback();
db_commit();
}}}
의도와는 달리 realname 필드와 user_name 필드가 모두 갱신됩니다. 중첩된 트랜잭션 안에서의 db_rollback()은 실제로 쿼리를 롤백하는 것이 아니라 단지 depth를 줄일 뿐이기 때문입니다. #17190

=== Error Handling ===
DB와 관련된 에러가 발생한 경우, DatabaseException을 던지는 것을 권합니다. 이 때 **db_error()** 함수를 이용하면 가장 최근에 발생한 DB 에러 메시지를 얻을 수 있습니다.
{{{
$res = db_query("SELECT * FROM users WHERE
                 user_name='".htmlspecialchars($user_name)."'");
if (!$res) {
    throw new DatabaseException(db_error()); 
}
}}}

== 주의사항 ==
=== CUBRID 사용시 ===
* 리소스 해제를 적절히 해주지 않으면 불규칙하게 Communication Error가 발생할 수 있습니다. #6818, #15166
* 값에 대해 quote 처리를 정확히 해주지 않으면 쿼리문이 제대로 수행되지 않을 수 있습니다. 문자열은 반드시 작은 따옴표로 감싸야 하고, 숫자형에 대해서는 작은 따옴표로 감싸지 말아야 합니다. #14725
* 키워드가 상당히 많은 편이므로, 키워드에 대한 double-quote 처리를 빼먹기 쉽습니다. 키워드에 대해서는 큰따옴표로 확실히 감싸주어야 합니다. ("key", "value" 등) #14912
=== MySQL ===
* MyISAM의 경우 트랜잭션을 지원하지 않습니다. 그런데 현재 nforge는 MyISAM을 사용하고 있기 때문에, 결국 MySQL로 nforge 설치시 DB 트랜잭션은 전혀 동작하고 있지 않은 상황입니다. #16154
