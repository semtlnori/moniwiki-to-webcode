[#7518]에서 거의 그대로 가져온 내용입니다.

/!\ 기존 코드가 썩 좋은 코드가 아니였기때문에 현재 이것의 복잡도를 줄이고 분리하는 방식으로 진행하게 될것입니다.
이러한 전체적인 코드 리팩토링을 위해 그 가이드를 제시하고 서로 토론하기 위해서 이 글을 씁니다.

부득불 기존 작업에 대한 비평을 하게 되는데 오해는 없으시기 바랍니다. :> 저라면 엄두도 못 내었을 작업입니다ㅋ

== 재사용 가능한 공유 함수들의 위치 ==
리팩토링 과정에서 분리해낸 함수중 재사용 가능성이 높은 경우는 보통 {{{common/include/utils.php}}}로 옮겨지고 그 이외에 함수들은 다른 곳에 옮겨지고 있습니다. 이것에 대한 규칙을 만들어 본다면
 1. 필수 함수: `common/include/utils.php` - 각 클래스에서 사용되는 경우.
 1. 그 이외의 함수들의 위치는 토론 필요.

== 토론중인 내용 ==
/!\ 아래의 내용은 덜 정리된 내용입니다. 분명하다고 판단되는 내용은 위쪽으로 올립니다.

=== 서브루틴의 인자 및 global 제거 규칙의 일관성 ===
global의 남발은 코드를 복잡하게 만들고 읽기도 어렵게 합니다.
하지만 모든 global을 없애는 것은 현실적으로 어렵겠죠.

global을 차차 없애되 일관성있게 없애고 이해하기 쉽도록 만드는 게 좋을 것입니다.

예를 들어, common/include/utils.php의 다음 함수를 보면
------
{{{
function util_send_message($to,$subject,$body,$from='',$BCC='',$sendername='',$extra_headers='',$send_html_email=false)
        global $Language,$sys_bcc_all_email_address,$sys_sendmail_path;
...
}}}
------
이를 토대로 규칙을 만들어 보면
 1. $HTML, $Language 같은 것은 그냥 global로 넣는다.
 2. $sys_* 변수는 그냥 global로 남겨두는 것이 나은 경우도 있고 인자로 집어넣는게 나을 수도 있을 것입니다.
 3. $_REQUEST, $_GLOBALS 같은 super global 변수는 인자로 넘겨줄 필요가 없고, 또 이경우는 get*FromRequest()류의 함수가 준비되어 있긴 합니다.


그러면 이 기준을 다음의 tracker/tracker.php에 적용해 보겠습니다.
----
{{{
function tracker_main($Language, $_REQUEST, $sys_use_tracker, $sys_max_tracker_upload, $HTML) {
        global $aid, $func;

...
}}}
----

위의 예에서 tracker메인 함수는 항상 $artifact_id (aid)가 필요하고, $group_id(선택사항), $func 등등의 추가적인 인자가 필요하겠죠.

여기에 규칙을 적용해보면 다음과 같이 됩니다.
-------
{{{
function tracker_main($aid, $func, $group_id = null, $atid = null) {
        global $HTML. $Language;
        global $sys_use_tracker, $sys_max_tracker_upload;
...
}}}
--------
서브루틴의 인자는 이런 방식 이외에도 플러그인에서 쓰는 방식처럼 다음과 같은 식으로도 종종 사용합니다.

------
{{{
function my_sub_function($formatter, $main_arg, $requests)
...

       $group_id = $requests['group_id'];
...
       $requests['ret'] = $result;
...
}}}
------

$myrequests = array()
$result = '';
$myrequests['ret'] = &$result;
# call
my_sub_function($HTML, 'hello', $myrequests);
...
}}}
=== 함수 이름 작명 및 리턴값 ===
함수이름 짓기는 생각보다 어렵습니다. gforge/fusionforge에서도 작명의 일관성은 그다지 찾아볼 수 없지요.

하지만 common/include 아래로 들어가는 함수 전체 이름은 되도록이면 일관성을 가지는 것이 나을것입니다.
정답은 없는 것입니다만 기존 함수들의 이름 등등을 살펴보면

{{{
function util_send_message($to,$subject,$body,$from='',$BCC='',$sendername='',$extra_headers='',$send_html_email=false)
 => prefix를 붙여(여기서는 util_을 붙임) namespace를 분리함.

function util_check_fileupload($filename)
...
        return false;
...
        return true;
 => check하는 경우는 check를, 리턴값은 false, true
}}}

이런 기준을 바탕으로 tracker/index.php의 다음 함수를 살펴보겠습니다.
-------
{{{
function check_attachment_files($files, $max_tracker_upload)
...
                                if ($val > 0 or $files["size"][$idx] > $max_tracker_upload) {
                                        return $files["name"][$idx];
                                }

...
}}}
--------
위의 함수는 첨부파일의 크기를 점검하고 있음을 알 수 있습니다.
 1. 함수 이름에서 파일 크기를 점검한다는 것인지를 알 수 없습니다. check_uploadfile_size()같은 식의 이름이 나을 것 같습니다.
 2. 여러개의 파일을 체크하는데 그중 잘못된 파일 한개만 있어도 리턴하며, 처음 발견된 잘못된 크기의 파일 이름만 리턴
   => 잘못된 파일의 이름을 모두가 필요할 것이며, 오류가 있으면 false를 리턴하는 것이 나아보입니다.

=== 공유 함수 분리 및 중복 제거 ===
비슷한 일을 하고 있는 함수가 꽤 있고, 거의 쓰이지 않고 있는 것들도 꽤 있습니다.
이런 코드 중복을 제거하고 공유함수로 가능한 것들은 common/include/*util*.php로 분리해야 할 필요가 있습니다.

대표적인 예로
 1. scm tracker플러그인의 커밋 트랙백관련
 2. 업로드파일 관련 함수 등등.

